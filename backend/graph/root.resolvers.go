package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"gym_project/auth"
	"gym_project/model"
)

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, data model.SignInInput) (string, error) {
	w := auth.WriterFromContext(ctx)
	if w == nil {
		return "", errors.New("ResponseWriter not injected in context")
	}

	// user, err :=r.dao.GetUser(data.Username, data.Password)
	// if err != nil {
	// 	return "", err
	// }

	// TODO: Criar o token
	auth.SetToken(w, "")

	// TODO: retornar token
	return "", nil
}

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, data model.SignUpInput) (string, error) {
	w := auth.WriterFromContext(ctx)
	if w == nil {
		return "", errors.New("ResponseWriter not injected in context")
	}

	// TODO: Cadastrar usuário no banco
	// TODO: Criar o token
	auth.SetToken(w, "")

	// TODO: retornar token
	return "", nil
}

// Logoff is the resolver for the logoff field.
func (r *mutationResolver) Logoff(ctx context.Context) (string, error) {
	w := auth.WriterFromContext(ctx)
	if w == nil {
		return "", errors.New("ResponseWriter not injected in context")
	}

	// salva o cookie já vencido para ser removido
	auth.ClearAuthToken(w)

	return "usuário deslogado com sucesso", nil
}
