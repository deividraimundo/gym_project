package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"gym_project/graph/generated"
	"gym_project/model"
)

// InsertTraining is the resolver for the insertTraining field.
func (r *mutationResolver) InsertTraining(ctx context.Context, data model.TrainingCustom) (int, error) {
	panic(fmt.Errorf("not implemented: InsertTraining - insertTraining"))
}

// UpdateTraining is the resolver for the updateTraining field.
func (r *mutationResolver) UpdateTraining(ctx context.Context, data model.TrainingCustom) (int, error) {
	panic(fmt.Errorf("not implemented: UpdateTraining - updateTraining"))
}

// DeleteTraining is the resolver for the deleteTraining field.
func (r *mutationResolver) DeleteTraining(ctx context.Context, id int) (int, error) {
	panic(fmt.Errorf("not implemented: DeleteTraining - deleteTraining"))
}

// GetTrainingsByUser is the resolver for the getTrainingsByUser field.
func (r *queryResolver) GetTrainingsByUser(ctx context.Context, idUser int) ([]*model.Training, error) {
	return r.dao.GetTrainingsByUser(ctx, idUser)
}

// GetTrainingByID is the resolver for the getTrainingById field.
func (r *queryResolver) GetTrainingByID(ctx context.Context, id int) (*model.Training, error) {
	return r.dao.GetTrainingById(ctx, id)
}

// Exercices is the resolver for the exercices field.
func (r *trainingResolver) Exercices(ctx context.Context, obj *model.Training) ([]*model.Exercices, error) {
	return r.dao.GetExercicesByIdTraining(ctx, obj.ID)
}

// Training returns generated.TrainingResolver implementation.
func (r *Resolver) Training() generated.TrainingResolver { return &trainingResolver{r} }

type trainingResolver struct{ *Resolver }
