package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"gym_project/auth"
	"gym_project/model"
)

// UpsertTraining is the resolver for the upsertTraining field.
func (r *mutationResolver) UpsertTraining(ctx context.Context, data model.TrainingInputCustom) (int, error) {
	user := auth.GetUserFromCtx(ctx)
	if user == nil {
		return 0, errors.New("usuario nao autenticado")
	}
	data.Self.IDUser = int(user.ID)
	return r.svc.UpsertTraining(ctx, data)
}

// DeleteTraining is the resolver for the deleteTraining field.
func (r *mutationResolver) DeleteTraining(ctx context.Context, id int) (int, error) {
	return r.svc.DeleteTraining(ctx, id)
}

// GetTrainingsByUser is the resolver for the getTrainingsByUser field.
func (r *queryResolver) GetTrainingsByUser(ctx context.Context) ([]*model.TrainingCustom, error) {
	user := auth.GetUserFromCtx(ctx)
	if user == nil {
		return nil, errors.New("usuario nao autenticado")
	}
	return r.svc.GetTrainingsByUser(ctx, int(user.ID))
}

// GetTrainingByID is the resolver for the getTrainingById field.
func (r *queryResolver) GetTrainingByID(ctx context.Context, id int) (*model.TrainingCustom, error) {
	return r.svc.GetTrainingByID(ctx, id)
}
