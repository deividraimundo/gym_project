package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"gym_project/auth"
	"gym_project/graph/generated"
	"gym_project/model"
)

// UpsertMedicalRestrictions is the resolver for the upsertMedicalRestrictions field.
func (r *mutationResolver) UpsertMedicalRestrictions(ctx context.Context, data model.MedicalRestrictionsInput) (int, error) {
	user := auth.GetUserFromCtx(ctx)
	if user == nil {
		return 0, errors.New("usuario nao autenticado")
	}
	data.IDUser = int(user.ID)
	return r.svc.UpsertMedicalRestrictions(ctx, data)
}

// DeleteMedicalRestrictions is the resolver for the deleteMedicalRestrictions field.
func (r *mutationResolver) DeleteMedicalRestrictions(ctx context.Context, id int) (int, error) {
	return r.svc.DeleteMedicalRestrictions(ctx, id)
}

// GetMedicalRestrictionsByUser is the resolver for the getMedicalRestrictionsByUser field.
func (r *queryResolver) GetMedicalRestrictionsByUser(ctx context.Context) ([]*model.MedicalRestrictions, error) {
	user := auth.GetUserFromCtx(ctx)
	if user == nil {
		return nil, errors.New("usuario nao autenticado")
	}
	return r.dao.SelectMedicalRestrictionsByUser(ctx, int(user.ID))
}

// GetMedicalRestrictionsByID is the resolver for the getMedicalRestrictionsById field.
func (r *queryResolver) GetMedicalRestrictionsByID(ctx context.Context, id int) (*model.MedicalRestrictions, error) {
	return r.dao.GetMedicalRestrictionsByID(ctx, id)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
